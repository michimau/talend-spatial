<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn 
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.EConnectionType
        org.talend.designer.codegen.config.CodeGeneratorArgument
        java.util.List 
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        
    " 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata != null) {
        String filename = ElementParameterParser.getValue(node,"__FILENAME__");
        String layer = ElementParameterParser.getValue(node,"__LAYER__");
        String xmin = ElementParameterParser.getValue(node,"__XMIN__");
        String ymin = ElementParameterParser.getValue(node,"__YMIN__");
        String xmax = ElementParameterParser.getValue(node,"__XMAX__");
        String ymax = ElementParameterParser.getValue(node,"__YMAX__");
        String where = ElementParameterParser.getValue(node,"__WHERE__");
        String sql = ElementParameterParser.getValue(node,"__SQL__");
        boolean dialect = ("true").equals(ElementParameterParser.getValue(node,"__DIALECT__"));
%>

/* initialize feature count */
int nbFeature_<%=cid %> = 0;

/* initialize OGR main variables */
boolean bReadOnly_<%=cid %> = true;
boolean bVerbose_<%=cid %> = true;
boolean bAllLayers_<%=cid %> = false;

int OGRNullFID_<%=cid %> = -1;
int nFetchFID_<%=cid %> = OGRNullFID_<%=cid %>;
int nRepeatCount_<%=cid %> = 1;

org.gdal.ogr.Geometry poSpatialFilter_<%=cid %> = null;

String pszWHERE_<%=cid %> = null;
String pszSQLStatement_<%=cid %> = null;
String pszDialect_<%=cid %> = null;

/* initialize data source and layer (only one) */
String pszDataSource_<%=cid %> = <%=filename %>;
String papszLayers_<%=cid %> = <%=layer %>;

// Register all known configured GDAL drivers.
try {
    org.gdal.ogr.ogr.RegisterAll();
} catch (java.lang.UnsatisfiedLinkError e) {
    System.err.println("In order to use GDAL/OGR in Talend, the java.library.path variable should point to GDAL library.");
    System.err.println("To set this property, go to the Run view > Advanced settings > Use specific JVM Arguments");
    System.err.println("and add a new argument:");
    System.err.println("  -Djava.library.path=/path/to/gdal/swig/java");
    System.err.println("");
    e.printStackTrace();
    // Aborting due to wrong GDAL driver configuration
    throw e;
}
<%
        // Spatial filter
        if (!xmin.equals("\"\"")) {
%>
/* initilize spatial filter */
org.gdal.ogr.Geometry oRing_<%=cid %> = new org.gdal.ogr.Geometry(org.gdal.ogr.ogrConstants.wkbLinearRing);
double xmin_<%=cid %> = new Double(<%=xmin %>).doubleValue();
double ymin_<%=cid %> = new Double(<%=ymin %>).doubleValue();
double xmax_<%=cid %> = new Double(<%=xmax %>).doubleValue();
double ymax_<%=cid %> = new Double(<%=ymax %>).doubleValue();
oRing_<%=cid %>.AddPoint(xmin_<%=cid %>, ymin_<%=cid %>);
oRing_<%=cid %>.AddPoint(xmin_<%=cid %>, ymax_<%=cid %>);
oRing_<%=cid %>.AddPoint(xmax_<%=cid %>, ymax_<%=cid %>);
oRing_<%=cid %>.AddPoint(xmax_<%=cid %>, ymin_<%=cid %>);
oRing_<%=cid %>.AddPoint(xmin_<%=cid %>, ymin_<%=cid %>);

poSpatialFilter_<%=cid %> = new org.gdal.ogr.Geometry(org.gdal.ogr.ogrConstants.wkbPolygon);
poSpatialFilter_<%=cid %>.AddGeometry(oRing_<%=cid %>);

//michimau
if (!where.equals("") && !sql.equals("")) {
    System.out.print("FAILURE:\n" + "You cannot use both where and sql.";
    return;
}

<%
        }
        
        // SQL filter
        if (!where.equals("")) {
%>
pszWHERE_<%=cid %> = <%=where %>;
<%
         }
%>

/* get feature source from store */
org.gdal.ogr.DataSource poDS_<%=cid %> = org.gdal.ogr.ogr.Open(pszDataSource_<%=cid %>, !bReadOnly_<%=cid %>);
if (poDS_<%=cid %> == null) {
    System.out.print("FAILURE:\n" + "Unable to open datasource `"
            + pszDataSource_<%=cid %> + "' with the following drivers.\n");

    for (int iDriver = 0; iDriver < org.gdal.ogr.ogr.GetDriverCount(); iDriver++) {
        System.out.println("  -> " + org.gdal.ogr.ogr.GetDriver(iDriver).GetName());
    }
    return;
}

org.gdal.ogr.Driver poDriver_<%=cid %> = poDS_<%=cid %>.GetDriver();

if (bVerbose_<%=cid %>) {
    System.out.println("INFO: Open of `" + pszDataSource_<%=cid %> + "'\n"
            + "      using driver `" + poDriver_<%=cid %>.GetName()
            + "' successful.");
}

if (papszLayers_<%=cid %>.equals("")) {
    System.err.println("Choose a layer to read:");
    for (int iLayer_<%=cid %> = 0; iLayer_<%=cid %> < poDS_<%=cid %>.GetLayerCount(); iLayer_<%=cid %>++) {
            org.gdal.ogr.Layer poLayer_<%=cid %> = poDS_<%=cid %>.GetLayer(iLayer_<%=cid %>);
            System.err.println(iLayer_<%=cid %> + ": " + poLayer_<%=cid %>.GetName());
    }
    throw new java.io.IOException("GDAL/OGR: Choose a layer to read from.");
}

if(dialect) {
    pszDialect_<%=cid %> = 'SQLITE';
} else {
    pszDialect_<%=cid %> = '';
}

if (pszSQL_<%=cid %> != null) {
    org.gdal.ogr.Layer poLayer_<%=cid %> = poDS_<%=cid %>.ExecuteSQL(pszSQL_<%=cid %>, "", pszDialect_<%=cid %>);
} else
    org.gdal.ogr.Layer poLayer_<%=cid %> = poDS_<%=cid %>.GetLayer(papszLayers_<%=cid %>);
}

/* Set filters if provided. */
if (pszWHERE_<%=cid %> != null)
    poLayer_<%=cid %>.SetAttributeFilter(pszWHERE_<%=cid %>);

if (poSpatialFilter_<%=cid %> != null)
    poLayer_<%=cid %>.SetSpatialFilter(poSpatialFilter_<%=cid %>);

/* CRS TODO get EPSG code */
int pszWKT_<%=cid %>;
if (poLayer_<%=cid %>.GetSpatialRef() == null)
    pszWKT_<%=cid %> = -1;
else {
	try {
    	pszWKT_<%=cid %> = poLayer_<%=cid %>.GetSpatialRef().AutoIdentifyEPSG();
    	//poLayer_<%=cid %>.GetSpatialRef().ExportToPrettyWkt();
    } catch (Exception e) {
    	System.err.println("Error trying to identify SRS. Error is: " + e.getMessage());
    	pszWKT_<%=cid %> = -1;
    }
}

/* loop over the feature collection and fill up the columns */
org.gdal.ogr.Feature poFeature_<%=cid %>;
String geomColum_<%=cid %> = poLayer_<%=cid %>.GetGeometryColumn();
while ((poFeature_<%=cid %> = poLayer_<%=cid %>.GetNextFeature()) != null) {
<%  
        List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
        String firstConnName = "";
        if (conns!=null) {
            if (conns.size()>0) {

                java.util.Set<String> listOfUniqueConnection = new java.util.HashSet<String>();
                for (int i = 0; i < conns.size(); i++) {
                    IConnection conn = conns.get(i);
                    firstConnName = conn.getName();
                    listOfUniqueConnection.add(firstConnName);

        
                    if ((conn.getLineStyle().equals(EConnectionType.FLOW_MAIN))||(conn.getLineStyle().equals(EConnectionType.FLOW_REF)) && !listOfUniqueConnection.contains(firstConnName)) {
                        List<IMetadataColumn> listColumns = metadata.getListColumns();
                        int sizeListColumns = listColumns.size();
                        for (int valueN = 0; valueN < sizeListColumns; valueN++) {
                            IMetadataColumn column = listColumns.get(valueN);
                            String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());

                            //Just to get a non-primitive type we can cast an Object instance to.
                            String objectType = JavaTypesManager.getTypeToGenerate(column.getTalendType(), true);

                            // TODO : handle key column ?
                            // GetFID
/*                            if (column.isKey()) {
                                if (typeToGenerate.equals("String")) {
                                }
                            } else {
*/                            
                            
                            if (typeToGenerate.equals("Geometry")) {
%>
    org.gdal.ogr.Geometry ogrGeometry_<%=cid %> = poFeature_<%=cid %>.GetGeometryRef();
    org.talend.sdi.geometry.Geometry geometry_<%=cid %> = ogrGeometry_<%=cid %> != null ?
        new org.talend.sdi.geometry.Geometry(ogrGeometry_<%=cid %>.ExportToWkt()) : null;

    if (geometry_<%=cid %> != null) {
        geometry_<%=cid %>.setSRID(pszWKT_<%=cid %>);
    }
    <%=conn.getName() %>.<%=column.getLabel() %> = geometry_<%=cid %>;
<%
                            } else if (typeToGenerate.equals("String")) {
%>
    <%=conn.getName() %>.<%=column.getLabel() %> = 
        poFeature_<%=cid %>.GetFieldAsString("<%=column.getLabel() %>");
<%                            
                               } else if (typeToGenerate.equals("Double")) {
%>
    <%=conn.getName() %>.<%=column.getLabel() %> = 
        poFeature_<%=cid %>.GetFieldAsDouble("<%=column.getLabel() %>");
<%                            
                               } else if (typeToGenerate.equals("Integer")) {
%>
    <%=conn.getName() %>.<%=column.getLabel() %> = 
        poFeature_<%=cid %>.GetFieldAsInteger("<%=column.getLabel() %>");
<%                            
                               } 
                               // TODO : GetStyleString
                        }
                    }
                }
            }
        }
%>
    nbFeature_<%=cid %>++;
<%
    }
}
%>
